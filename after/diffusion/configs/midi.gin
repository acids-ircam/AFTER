from __gin__ import dynamic_registration


import after
from after import diffusion
from cached_conv import convs



IN_SIZE = None
N_SIGNAL = None

ZS_CHANNELS = 128
ZT_CHANNELS = 2
SR = 44100
STRUCTURE_TYPE = "midi"
PHASE_1_STEP = 1
MAX_STEPS = 600000

LOCAL_ATTENTION_SIZE = 16
ATTENTION_CHUNK_SIZE = 4

# Data
diffusion.utils.collate_fn:
    n_signal = %N_SIGNAL
    structure_type = %STRUCTURE_TYPE

encoder/diffusion.networks.ecapa_encoder.ECAPATDNN:
    attention_channels = 128
    channels = [512, 512, 512, 1024]
    dilations = [1, 1, 1, 1]
    global_context = True
    groups = [1, 1, 1, 1]
    in_size = %IN_SIZE
    kernel_sizes = [3, 3, 3, 3]
    out_dim = %ZT_CHANNELS
    pooling = True
    res2net_scale = 8
    se_channels = 128
    spherical_normalisation = False
    use_tanh = False
    regularisation = "ac"

encoder/convs.get_padding.mode = 'causal'

diffusion.networks.transformerv2.DenoiserV2:
    n_channels = %IN_SIZE
    seq_len = %N_SIGNAL   
    embed_dim = 512
    cond_dim = %ZT_CHANNELS
    noise_embed_dims = 64
    n_layers = 6
    mlp_multiplier = 3
    dropout  = 0.1
    causal = True
    tcond_dim = %ZS_CHANNELS
    pos_emb_type = "rotary"
    local_attention_size = %LOCAL_ATTENTION_SIZE
    attention_chunk_size = %ATTENTION_CHUNK_SIZE


diffusion.model.Base:
    sr = %SR
    net= @diffusion.networks.transformerv2.DenoiserV2()
    encoder = @encoder/diffusion.networks.ecapa_encoder.ECAPATDNN() 
    encoder_time = None
    classifier = None
    time_transform = None
    drop_value = -4.
    drop_rate = 0.2
    sigma_data = 1.

 
diffusion.model.Base.fit: 
    max_steps = %MAX_STEPS
    train_encoder = True

    ## Adversarial
    timbre_warmup = %PHASE_1_STEP
    stop_training_encoder_step = %MAX_STEPS
    adversarial_weight = 0.

    # Noise augmentation to smooth the latent space
    zsem_noise_aug = 0.05
    time_cond_noise_aug = 0.

    ## Encoder regularisation
    regularisation_weight = 1
    regularisation_warmup = 1
    
    ## Cycle loss
    cycle_consistency = False

    drop_targets = [1]

    ### DATA ###
    shuffle_zsem = [4,8]

    ## Log ## 
    steps_valid = 10000
    steps_save = 50000

    use_ema = True
    lr = 1e-4
