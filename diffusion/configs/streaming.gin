from __gin__ import dynamic_registration



import diffusion.networks 
import diffusion.model
import diffusion.utils
from cached_conv import convs
import distill_diffusion


N_SIGNAL_STREAMING = 8
ZT_CHANNELS_POST = 8

diffusion.utils.collate_fn_streaming:
    n_signal = %N_SIGNAL_STREAMING
    n_signal_timbre = %N_SIGNAL
    structure_type = %STRUCTURE_TYPE


post_encoder/diffusion.networks.LinearEncoder:
    in_size = %ZT_CHANNELS
    channels = [512, 1024, 1024, 256, %ZT_CHANNELS_POST]
    drop_out = 0.1


diffusion.networks.unet1d.UNET1D:
    in_size = %IN_SIZE
    channels = [512, 512, 512, 512]
    ratios = [1, 1, 1, 2]
    time_cond_in_channels = %TOTAL_ZS_CHANNELS
    time_cond_channels = 0
    cond_channels = %ZT_CHANNELS_POST
    time_channels = 64
    n_attn_layers = 0
    kernel_size = 3
    use_res_last = False


diffusion.model.Base:
    sr = %SR
    net=@diffusion.networks.unet1d.UNET1D()
    encoder = @encoder/diffusion.networks.Encoder1D()   
    post_encoder = @post_encoder/diffusion.networks.LinearEncoder()
    encoder_time = @encoder_time/diffusion.networks.Encoder1D()   
    classifier = None
    drop_value = -2.
    drop_rate = 0.2
    sigma_data = %SIGMA_DATA

 
diffusion.model.Base.fit: 
    max_steps = 3100000
    shuffle_zsem = False
    steps_valid = 10000
    steps_save = 50000
    adversarial_weight = 0.
    cycle_consistency = False
    timbre_warmup = 1
    adversarial_warmup = 1
    train_encoder = False
    train_encoder_time = False
    use_ema = True
    lr = 1e-4
